---
  - name: Deploy windows_exporter
    hosts: all
    gather_facts: false
    tasks:
      - name: Get server name (GATHER_FACTS MUST BE TRUE OR THIS WILL FAIL)
        set_fact:
          renew_cert: "{{ force_cert_renewal | default(false) }}"
      - name: show value
        debug:
          msg: "{{renew_cert}}"
      - name: Uninstall windows_exporter
        #win_command: "C:/Windows/Temp/{{ package_name }} {{ install_params }}"
        ansible.windows.win_package:
          #path: "C:\\Windows\\Temp\\{{ package_name }}"
          product_id: "{{ product_id }}"
          state: absent
        when: uninstall == "yes"
      - name: Check if install directory exists
        ansible.windows.win_stat: 
          path: "{{ install_dir }}"  
        register: installdir
      - name: Create install directory if it doesn't exist
        ansible.windows.win_file:
          path: "{{ install_dir }}"
          state: directory
        when: installdir.stat.exists == false
      - name: Check if ca file exists
        ansible.windows.win_stat: 
          path: "{{ install_dir }}/ca.crt"  
        register: file_ca
      - name: Check if cert file exists
        ansible.windows.win_stat: 
          path: "{{ install_dir }}/cert.crt"  
        register: file_cert
      - name: Check if key file exists
        ansible.windows.win_stat: 
          path: "{{ install_dir }}/cert.key"  
        register: file_key
      - name: Generate certificates
        block:
          - name: Get server name (GATHER_FACTS MUST BE TRUE OR THIS WILL FAIL)
            set_fact:
              server_name: "{{ inventory_hostname | lower }}"
          - name:
            uri:
              url: "{{ lookup('env','VAULT_ADDR') }}/v1/auth/approle/login"
              method: POST
              return_content: true
              headers:
                accept: application/json
              body_format: json
              body:
                role_id: "{{ lookup('env','ROLE_ID') }}"
                secret_id: "{{ lookup('env','SECRET_ID') }}"
              status_code: 200
            register: vault_auth
            delegate_to: localhost
          - name:
            uri:
              url: "{{ lookup('env','VAULT_ADDR') }}/v1/prompki/issue/server"
              method: POST
              return_content: true
              headers:
                accept: application/json
                X-Vault-Token: "{{ vault_auth.json.auth.client_token }}"
              body_format: json
              body:
                common_name: "{{ server_name }}"
                alt_names: "{{ server_name }}"
                private_key_format: "pkcs8"
                ttl: "{{ cert_ttl }}"
                format: "pem"
              status_code: 200
            register: cert
            delegate_to: localhost
          #- name:
          #  debug:
          #    msg: "{{ cert.json }}"
          - name: Write ca file
            ansible.windows.win_copy:
              content: "{{ cert.json.data.issuing_ca }}"
              dest: "{{ install_dir }}/ca.crt"  
          - name: Write cert file
            ansible.windows.win_copy:
              content: "{{ cert.json.data.certificate }}"
              dest: "{{ install_dir }}/cert.crt"  
          - name: Write key file
            ansible.windows.win_copy:
              content: "{{ cert.json.data.private_key }}"
              dest: "{{ install_dir }}/cert.key"  
        when: file_ca.stat.exists == false or file_cert.stat.exists == false or file_key.stat.exists == false or renew_cert == true
      - name: Install windows_exporter
        when: cert_only is not defined or cert_only == false
        block:
          - name: Show config vars
            debug:
              msg: "Using template {{ prometheus_config | default('config.yml.j2') }} with the following enabled collectors: {{ prometheus_enabled_collectors }}"
          - name: Create config.yml
            ansible.windows.win_template:
              src: "{{ prometheus_config | default('config.yml.j2') }}"
              dest: "{{ install_dir }}/config.yml"
          - name: Create web-config.yml
            ansible.windows.win_template:
              src: web-config.yml.j2
              dest: "{{ install_dir }}/web-config.yml"
          - name: Download windows_exporter
            ansible.windows.get_url:
              url: "{{ package_url }}{{ package_name }}"
              dest: "/tmp/{{ package_name }}"
            delegate_to: localhost
          - name: Copy a single file
            ansible.windows.win_copy:
              src: "/tmp/{{ package_name }}"
              dest: "C:\\Windows\\Temp\\{{ package_name }}"
          - name: Install/Update windows_exporter
            #win_command: "C:/Windows/Temp/{{ package_name }} {{ install_params }}"
            ansible.windows.win_package:
              path: "C:\\Windows\\Temp\\{{ package_name }}"
              #product_id: "{{ product_id }}"
              state: present
              arguments: "{{ install_params }}"
          #netsh advfirewall firewall add rule name="windows_exporter" dir=in action=allow protocol=tcp localport=9182 profile=any remoteip=any
          #windows_exporter creates a firewall rule automatically
          #- name: Create a firewall rule to allow traffic to the windows_exporter listening port
          #  win_firewall_rule:
          #    name: windows_exporter
          #    localport: 9182
          #    action: allow
          #    direction: in
          #    protocol: tcp
          #    profiles: domain,private,public
          #    remoteip: any
          #    state: present
          #    enabled: yes
          - name: Delete windows_exporter msi
            ansible.windows.win_file:
              path: "C:\\Windows\\Temp\\{{ package_name }}"
              state: absent
      - name: Restart a service
        ansible.windows.win_service:
          name: windows_exporter
          state: restarted
